---
import i18next from 'i18next'
import Analytics from '../components/Analytics.astro';

const matches = import.meta.glob('../assets/i18n/**/translation.json', { eager: true });
const translations = Object.values(matches) as any;
const resources = {}

translations.forEach((translation) => {
	resources[translation.lang_key] = {}
	resources[translation.lang_key].translation = {...translation}
})

const supportedLanguages = translations.map(({lang_key, lang_description}, ) => ({lang_key, lang_description}))

await i18next.init({
	fallbackLng: Astro.preferredLocale,
	// debug: true,
	lng: Astro.currentLocale,
	// preload: ['en', 'pt'],
	ns: ['translation'],
	defaultNS: 'translation',
	resources,
});
---
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<meta name="robots" content="noindex" />
	<title>/</title>
	<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
	<Analytics />
</head>
<body>
	<script is:inline define:vars={{supportedLanguages}}>
		const suportedLanguageKeys = supportedLanguages.map(({lang_key}) => lang_key)
		const storedLocale = localStorage.getItem('locale')

		window.addEventListener("load", function(){
			setTimeout(() => {
				if (suportedLanguageKeys.includes(storedLocale)) {
					window.location.pathname = storedLocale
				} else {
					const matchingLanguage = navigator.languages
						.map(language => language.slice(0, 2))
						.find((language) => suportedLanguageKeys.includes(language))

					window.location.pathname = matchingLanguage? matchingLanguage: 'en';
				}
			}, 500)
		});
	</script>
	<div class="flex items-center justify-center flex-col gap-4 min-h-dvh">
		<h1 class="text-center">You may have javascript disabled. If so pick your language manually</h1>
		<ul class="flex gap-4">
			{supportedLanguages.map(({lang_key, lang_description}) =><li>
				<a href={lang_key} class="text-blue-500 underline">{lang_description}</a>
			</li>)}
		</ul>
	</div>
</body>
</html>
